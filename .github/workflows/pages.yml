name: Deploy Stoppclock to GitHub Pages

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  NODE_VERSION: 22
  CUSTOM_DOMAIN: www.stoppclock.com
  TARGET_URL: https://www.stoppclock.com/

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Bump SW cache key to commit SHA
        shell: bash
        run: |
          set -euo pipefail
          SHORT_SHA="$(printf '%s' "${GITHUB_SHA}" | cut -c1-7)"
          echo "Using SW cache key: sc-precache-${SHORT_SHA}"
          perl -0777 -pe "s/const\\s+PRECACHE\\s*=\\s*'sc-precache-[^']*';/const PRECACHE = 'sc-precache-${SHORT_SHA}';/g" -i public/sw.js
          grep -n "const PRECACHE" public/sw.js

      - name: Setup Node (pinned)
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Build
        run: npm run build

      - name: Inline entry JS/CSS into dist/index.html
        run: node scripts/inline_assets.mjs

      - name: Assert entry is inlined (no external module src)
        run: |
          node <<'NODE'
          import fs from 'fs';
          const html = fs.readFileSync('dist/index.html', 'utf8');
          const stripped = html.replace(/<script\b[^>]*>[\s\S]*?<\/script>/gi, match => {
            return match.includes('type="module"') ? '<inline-script></inline-script>' : match;
          });
          if (/<script[^>]*type="module"[^>]*src=/.test(stripped)) {
            console.error('Inline failed: module script still references src attribute.');
            process.exit(1);
          }
          if (html.includes('Loading app')) {
            console.error('Legacy loader fallback text still present in dist/index.html');
            process.exit(1);
          }
          NODE

      - name: Add CNAME and .nojekyll
        run: |
          echo "${{ env.CUSTOM_DOMAIN }}" > ./dist/CNAME
          touch ./dist/.nojekyll

      - name: Upload Pages artifact (pinned)
        uses: actions/upload-pages-artifact@7b1f4a764d45c48632c6b24a0339c27f5614fb0b
        with:
          path: ./dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        name: Deploy to GitHub Pages (pinned)
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e

  postcheck:
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 12
    steps:
      - name: Checkout (pinned)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

      - name: Setup Node (pinned)
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Playwright (Chromium only, no-save)
        run: |
          npm i --no-save playwright@1.47.2
          npx playwright install --with-deps chromium

      - name: Show deployed artifact shape (dist/)
        run: |
          echo "=== dist/ top ==="
          ls -lah dist || true
          echo "=== CNAME ==="
          cat dist/CNAME || true
          echo "=== head of dist/index.html ==="
          sed -n '1,160p' dist/index.html || true

      - name: Run smoke test
        env:
          TARGET_URLS: ${{ needs.deploy.outputs.page_url }},${{ env.TARGET_URL }}
        run: node scripts/smoke.mjs

      - name: Upload Playwright artifacts (screenshots)
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: playwright-screenshots
          path: artifacts/playwright/**
          if-no-files-found: ignore
          retention-days: 7
